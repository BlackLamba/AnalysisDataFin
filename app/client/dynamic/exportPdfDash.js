async function exportDashboardToPDF() {
  try {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF('p', 'mm', 'a4');
    const margin = 15;
    const pageWidth = pdf.internal.pageSize.getWidth() - 2 * margin;
    let yPosition = margin;

    const exportBlocks = document.querySelectorAll('.cards, .graph');

    for (const block of exportBlocks) {
      if (block.querySelector('#exportPdfBtn')) continue;

      const clone = block.cloneNode(true);

      // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ canvas –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ –∫–ª–æ–Ω
      const originalCanvases = block.querySelectorAll('canvas');
      const cloneCanvases = clone.querySelectorAll('canvas');

      for (let i = 0; i < originalCanvases.length; i++) {
        const originalCanvas = originalCanvases[i];
        const cloneCanvas = cloneCanvases[i];
        if (!cloneCanvas) continue;

        const dataURL = originalCanvas.toDataURL();

        const ctx = cloneCanvas.getContext('2d');
        const img = new Image();
        await new Promise(resolve => {
          img.onload = () => {
            ctx.clearRect(0, 0, cloneCanvas.width, cloneCanvas.height);
            ctx.drawImage(img, 0, 0);
            resolve();
          };
          img.src = dataURL;
        });
      }

      // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –∫–ª–æ–Ω–µ
      clone.querySelectorAll('h2, h3').forEach(h => {
        h.style.color = '#111';
      });

      clone.style.position = 'absolute';
      clone.style.left = '-9999px';
      clone.style.top = '0';
      clone.style.backgroundColor = '#fff';
      document.body.appendChild(clone);

      const canvas = await html2canvas(clone, {
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        ignoreElements: el => el.id === 'exportPdfBtn',
      });

      document.body.removeChild(clone);

      const imgData = canvas.toDataURL('image/png');
      const imgProps = pdf.getImageProperties(imgData);
      const pdfHeight = (imgProps.height * pageWidth) / imgProps.width;

      if (yPosition + pdfHeight > pdf.internal.pageSize.getHeight() - margin) {
        pdf.addPage();
        yPosition = margin;
      }

      pdf.addImage(imgData, 'PNG', margin, yPosition, pageWidth, pdfHeight);
      yPosition += pdfHeight + 10;
    }

    pdf.save('financial-dashboard-report.pdf');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: ' + error.message);
  }
}


// üëâ –í–†–ï–ú–ï–ù–ù–û –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–µ
function applyTemporaryHeadingStyles() {
  const headings = document.querySelectorAll('.graph h2, .cards h3');
  const originalStyles = [];

  headings.forEach(h => {
    originalStyles.push({
      element: h,
      style: {
        color: h.style.color,
        backgroundColor: h.style.backgroundColor,
        fontWeight: h.style.fontWeight,
        padding: h.style.padding,
        borderRadius: h.style.borderRadius,
        display: h.style.display
      }
    });

    h.style.color = '#1a1a1a';
    h.style.fontWeight = 'bold';
    h.style.backgroundColor = '#f8f8f8';
    h.style.padding = '6px 10px';
    h.style.borderRadius = '6px';
    h.style.display = 'inline-block';
  });

  return originalStyles;
}

// üëâ –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ —Å—Ç–∏–ª–∏ –ø–æ—Å–ª–µ PDF
function restoreHeadingStyles(styles) {
  styles.forEach(({ element, style }) => {
    element.style.color = style.color;
    element.style.backgroundColor = style.backgroundColor;
    element.style.fontWeight = style.fontWeight;
    element.style.padding = style.padding;
    element.style.borderRadius = style.borderRadius;
    element.style.display = style.display;
  });
}

// üëâ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
document.addEventListener('DOMContentLoaded', () => {
  const exportBtn = document.getElementById('exportPdfBtn');
  if (!exportBtn) return;

  exportBtn.addEventListener('click', async () => {
    if (!window.jspdf || !window.html2canvas) {
      alert('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      return;
    }

    exportBtn.disabled = true;
    exportBtn.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF...';

    try {
      await exportDashboardToPDF();
    } catch (e) {
      console.error(e);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ' + e.message);
    } finally {
      exportBtn.disabled = false;
      exportBtn.textContent = '–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ PDF';
    }
  });
});